{"ast":null,"code":"/*\n * Calily\n * API service layer for frontend-backend communication\n *\n * Author: Ava Raper\n * Version: 1.0\n */\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// API service class for all backend requests\nclass ApiService {\n  // base request method with error handling\n  async request(endpoint, options = {}) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      ...options\n    });\n    if (!response.ok) throw new Error('Request failed');\n    return response.json();\n  }\n\n  // get all entries from backend\n  async getEntries() {\n    return this.request('/entries');\n  }\n\n  // create new entry with text\n  async createEntry(text) {\n    return this.request('/entries', {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  // delete entry by ID\n  async deleteEntry(id) {\n    return this.request(`/entries/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // search entries by query text\n  async searchEntries(query) {\n    return this.request(`/search?q=${encodeURIComponent(query)}`);\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","response","fetch","headers","ok","Error","json","getEntries","createEntry","text","method","body","JSON","stringify","deleteEntry","id","searchEntries","query","encodeURIComponent","apiService"],"sources":["/Users/avaraper/Desktop/Virginia Tech/SUMMER '25/CS3744/calily/src/services/api.js"],"sourcesContent":["/*\n * Calily\n * API service layer for frontend-backend communication\n *\n * Author: Ava Raper\n * Version: 1.0\n */\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// API service class for all backend requests\nclass ApiService {\n  // base request method with error handling\n  async request(endpoint, options = {}) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: { 'Content-Type': 'application/json' },\n      ...options\n    });\n    if (!response.ok) throw new Error('Request failed');\n    return response.json();\n  }\n\n  // get all entries from backend\n  async getEntries() {\n    return this.request('/entries');\n  }\n\n  // create new entry with text\n  async createEntry(text) {\n    return this.request('/entries', {\n      method: 'POST',\n      body: JSON.stringify({ text })\n    });\n  }\n\n  // delete entry by ID\n  async deleteEntry(id) {\n    return this.request(`/entries/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // search entries by query text\n  async searchEntries(query) {\n    return this.request(`/search?q=${encodeURIComponent(query)}`);\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,GAAGG,QAAQ,EAAE,EAAE;MACzDI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/C,GAAGH;IACL,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnD,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB;;EAEA;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACT,OAAO,CAAC,UAAU,CAAC;EACjC;;EAEA;EACA,MAAMU,WAAWA,CAACC,IAAI,EAAE;IACtB,OAAO,IAAI,CAACX,OAAO,CAAC,UAAU,EAAE;MAC9BY,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ;MAAK,CAAC;IAC/B,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMK,WAAWA,CAACC,EAAE,EAAE;IACpB,OAAO,IAAI,CAACjB,OAAO,CAAC,YAAYiB,EAAE,EAAE,EAAE;MACpCL,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMM,aAAaA,CAACC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACnB,OAAO,CAAC,aAAaoB,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;EAC/D;AACF;AAEA,MAAME,UAAU,GAAG,IAAItB,UAAU,CAAC,CAAC;AACnC,eAAesB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
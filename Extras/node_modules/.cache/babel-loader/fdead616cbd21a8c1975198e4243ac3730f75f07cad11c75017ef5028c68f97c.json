{"ast":null,"code":"var _jsxFileName = \"/Users/avaraper/Desktop/Virginia Tech/SUMMER '25/CS3744/calily/src/components/ChartCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartCard = ({\n  entries = []\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [themeChangeKey, setThemeChangeKey] = useState(0);\n\n  // Debug log to see what we're receiving\n  console.log('ChartCard received entries:', entries, 'Type:', typeof entries, 'Is Array:', Array.isArray(entries));\n  useEffect(() => {\n    const handleThemeChange = () => {\n      setThemeChangeKey(prev => prev + 1);\n    };\n    window.addEventListener('themeChanged', handleThemeChange);\n    return () => window.removeEventListener('themeChanged', handleThemeChange);\n  }, []);\n  useEffect(() => {\n    // Clear any existing chart first\n    if (svgRef.current) {\n      d3.select(svgRef.current).selectAll(\"*\").remove();\n    }\n\n    // Multiple safety checks\n    if (!entries || !Array.isArray(entries) || entries.length === 0) {\n      console.log('ChartCard: No valid entries to display');\n      return;\n    }\n    console.log('ChartCard: Processing', entries.length, 'entries');\n    const symptomKeywords = ['fatigue', 'joint pain', 'skin problems', 'rash', 'muscle aches', 'muscle weakness', 'fever', 'swollen glands', 'numbness', 'tingling', 'shortness of breath', 'chest pain', 'weight loss', 'weight gain', 'digestive issues', 'abdominal pain', 'bloating', 'nausea', 'vomiting', 'stiffness', 'swelling', 'inflammation', 'butterfly rash', 'dry patches', 'sores', 'chills', 'night sweats', 'headache', 'dizzy', 'tired', 'weak', 'pain', 'cramping', 'bowel changes', 'emotional', 'difficulty moving', 'lymph nodes', 'heat', 'redness'];\n    const symptomCounts = {};\n    symptomKeywords.forEach(symptom => {\n      symptomCounts[symptom] = 0;\n    });\n    entries.forEach(entry => {\n      if (entry && entry.text && typeof entry.text === 'string') {\n        const text = entry.text.toLowerCase();\n        symptomKeywords.forEach(symptom => {\n          if (text.includes(symptom)) {\n            symptomCounts[symptom]++;\n          }\n        });\n      }\n    });\n    const data = Object.entries(symptomCounts).filter(([symptom, count]) => count > 0).map(([symptom, count]) => ({\n      symptom,\n      count\n    })).sort((a, b) => b.count - a.count).slice(0, 10);\n    if (data.length === 0) {\n      console.log('ChartCard: No symptoms found in entries');\n      return;\n    }\n    const chartBarColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-bar').trim() || '#666';\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 60,\n      left: 60\n    };\n    const width = 500 - margin.left - margin.right;\n    const height = 300 - margin.top - margin.bottom;\n    const svg = d3.select(svgRef.current).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n    const g = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    const xScale = d3.scaleBand().domain(data.map(d => d.symptom)).range([0, width]).padding(0.1);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.count)]).range([height, 0]);\n    g.selectAll(\".bar\").data(data).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => xScale(d.symptom)).attr(\"width\", xScale.bandwidth()).attr(\"y\", d => yScale(d.count)).attr(\"height\", d => height - yScale(d.count)).attr(\"fill\", chartBarColor);\n    g.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(xScale)).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \".15em\").attr(\"transform\", \"rotate(-45)\").style(\"font-size\", \"10px\");\n    g.append(\"g\").call(d3.axisLeft(yScale));\n    console.log('ChartCard: Chart rendered successfully');\n  }, [entries, themeChangeKey]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"card-title\",\n      children: \"Symptom Frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: !entries || !Array.isArray(entries) || entries.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-entries\",\n        children: \"No data to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartCard, \"COWW6JYeBgEBS+/IpjsRtslGBfU=\");\n_c = ChartCard;\nexport default ChartCard;\nvar _c;\n$RefreshReg$(_c, \"ChartCard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","ChartCard","entries","_s","svgRef","themeChangeKey","setThemeChangeKey","console","log","Array","isArray","handleThemeChange","prev","window","addEventListener","removeEventListener","current","select","selectAll","remove","length","symptomKeywords","symptomCounts","forEach","symptom","entry","text","toLowerCase","includes","data","Object","filter","count","map","sort","a","b","slice","chartBarColor","getComputedStyle","document","documentElement","getPropertyValue","trim","margin","top","right","bottom","left","width","height","svg","attr","g","append","xScale","scaleBand","domain","d","range","padding","yScale","scaleLinear","max","enter","bandwidth","call","axisBottom","style","axisLeft","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/avaraper/Desktop/Virginia Tech/SUMMER '25/CS3744/calily/src/components/ChartCard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst ChartCard = ({ entries = [] }) => {\n  const svgRef = useRef();\n  const [themeChangeKey, setThemeChangeKey] = useState(0);\n\n  // Debug log to see what we're receiving\n  console.log('ChartCard received entries:', entries, 'Type:', typeof entries, 'Is Array:', Array.isArray(entries));\n\n  useEffect(() => {\n    const handleThemeChange = () => {\n      setThemeChangeKey(prev => prev + 1); \n    };\n\n    window.addEventListener('themeChanged', handleThemeChange);\n    return () => window.removeEventListener('themeChanged', handleThemeChange);\n  }, []);\n\n  useEffect(() => {\n    // Clear any existing chart first\n    if (svgRef.current) {\n      d3.select(svgRef.current).selectAll(\"*\").remove();\n    }\n\n    // Multiple safety checks\n    if (!entries || !Array.isArray(entries) || entries.length === 0) {\n      console.log('ChartCard: No valid entries to display');\n      return;\n    }\n\n    console.log('ChartCard: Processing', entries.length, 'entries');\n\n    const symptomKeywords = [\n      'fatigue', 'joint pain', 'skin problems', 'rash', 'muscle aches',\n      'muscle weakness', 'fever', 'swollen glands', 'numbness', 'tingling',\n      'shortness of breath', 'chest pain', 'weight loss', 'weight gain',\n      'digestive issues', 'abdominal pain', 'bloating', 'nausea', 'vomiting',\n      'stiffness', 'swelling', 'inflammation', 'butterfly rash', 'dry patches',\n      'sores', 'chills', 'night sweats', 'headache', 'dizzy', 'tired',\n      'weak', 'pain', 'cramping', 'bowel changes', 'emotional',\n      'difficulty moving', 'lymph nodes', 'heat', 'redness'\n    ];\n\n    const symptomCounts = {};\n    symptomKeywords.forEach(symptom => {\n      symptomCounts[symptom] = 0;\n    });\n\n    entries.forEach(entry => {\n      if (entry && entry.text && typeof entry.text === 'string') {\n        const text = entry.text.toLowerCase();\n        symptomKeywords.forEach(symptom => {\n          if (text.includes(symptom)) {\n            symptomCounts[symptom]++;\n          }\n        });\n      }\n    });\n\n    const data = Object.entries(symptomCounts)\n      .filter(([symptom, count]) => count > 0)\n      .map(([symptom, count]) => ({ symptom, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    if (data.length === 0) {\n      console.log('ChartCard: No symptoms found in entries');\n      return;\n    }\n\n    const chartBarColor = getComputedStyle(document.documentElement)\n      .getPropertyValue('--chart-bar').trim() || '#666';\n\n    const margin = { top: 20, right: 20, bottom: 60, left: 60 };\n    const width = 500 - margin.left - margin.right;\n    const height = 300 - margin.top - margin.bottom;\n\n    const svg = d3.select(svgRef.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n    const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    const xScale = d3.scaleBand()\n      .domain(data.map(d => d.symptom))\n      .range([0, width])\n      .padding(0.1);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.count)])\n      .range([height, 0]);\n\n    g.selectAll(\".bar\")\n      .data(data)\n      .enter().append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", d => xScale(d.symptom))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"y\", d => yScale(d.count))\n      .attr(\"height\", d => height - yScale(d.count))\n      .attr(\"fill\", chartBarColor); \n\n    g.append(\"g\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(d3.axisBottom(xScale))\n      .selectAll(\"text\")\n      .style(\"text-anchor\", \"end\")\n      .attr(\"dx\", \"-.8em\")\n      .attr(\"dy\", \".15em\")\n      .attr(\"transform\", \"rotate(-45)\")\n      .style(\"font-size\", \"10px\");\n\n    g.append(\"g\")\n      .call(d3.axisLeft(yScale));\n\n    console.log('ChartCard: Chart rendered successfully');\n\n  }, [entries, themeChangeKey]); \n\n  return (\n    <div className=\"card\">\n      <h2 className=\"card-title\">Symptom Frequency</h2>\n      <div className=\"chart-container\">\n        {!entries || !Array.isArray(entries) || entries.length === 0 ? ( \n          <div className=\"no-entries\">No data to display</div>\n        ) : (\n          <svg ref={svgRef} style={{ width: '100%', height: '100%' }}></svg>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChartCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}